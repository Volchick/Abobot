from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import FSInputFile
from sqlalchemy import select, desc
from app.models import User, Message, Dialog
from app.database import async_session_maker
from datetime import datetime
from sqlalchemy.orm import selectinload


router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    userid = message.from_user.id
    async with async_session_maker() as session:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        result = await session.execute(select(User).where(User.telegram_id == userid))
        user = result.scalar_one_or_none()
        if not user:
            user = User(telegram_id=userid)
            session.add(user)
            await session.flush()  # –ü–æ–ª—É—á–∞–µ–º user.id

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∏–∞–ª–æ–≥
        result = await session.execute(select(Dialog).where(Dialog.user_id == userid))
        dialog = result.scalar_one_or_none()
        if not dialog:
            dialog = Dialog(user_id=userid)
            session.add(dialog)
            await session.flush()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_obj = Message(dialog_id=dialog.id, text="–ê–±–æ–±–∞!", created_at=datetime.now())
        session.add(message_obj)
        await session.commit()

    await message.answer("–ê–±–æ–±–∞!")

@router.message(Command("reply"))
async def cmd_reply(message: types.Message):
    await message.reply("–ß–µ–≥–æ —Ç–µ–±–µ –Ω–∞–¥–æ–±–Ω–æ?")

@router.message(Command("aboba"))
async def cmd_aboba(message: types.Message):
    photo = FSInputFile("app/pictures/aboba.png")
    await message.answer_photo(photo, caption="–ê–±–æ–±–∞ :)")

@router.message(Command("gael"))
async def cmd_gael(message: types.Message):
    photo = FSInputFile("app/pictures/gnomegael.jpg")
    await message.answer_photo(photo, caption="–û—Ç–¥–∞–π —Å–≤–æ—é —Ç—ë–º–Ω—É—é –¥—É—à—É!")

@router.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = (
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/reply - –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/aboba - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –ª—è–≥—É—à–∫–æ–π\n"
        "/gael - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É —Å –≥–Ω–æ–º–æ–º\n"
        "/re_chat - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text)

@router.message()
async def save_message(message: types.Message):
    userid = message.from_user.id
    text = message.text
    if not text or text.startswith('/'):
        return  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    async with async_session_maker() as session:
        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(select(User).where(User.telegram_id == userid))
        user = result.scalar_one_or_none()
        if not user:
            user = User(telegram_id=userid)
            session.add(user)
            await session.flush()

        # –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –¥–∏–∞–ª–æ–≥
        result = await session.execute(select(Dialog).where(Dialog.user_id == userid))
        dialog = result.scalar_one_or_none()
        if not dialog:
            dialog = Dialog(user_id=userid)
            session.add(dialog)
            await session.flush()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg = Message(dialog_id=dialog.id, text=text, created_at=datetime.now())
        session.add(msg)
        await session.commit()

@router.message(Command('re_chat'))
async def re_chat(message: types.Message):
    try:
        if message.from_user:
            user_id = message.from_user.id
        else:
            raise Exception("message.from_user –ø—É—Å—Ç!")
    except ValueError:
        await message.answer("ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return
    except Exception:
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø—É—Å—Ç–æ.")
        return

    try:
        async with get_session() as session:
            result = await session.execute(
                text(
                    "SELECT m.text, m.created_at FROM messages m "
                    "JOIN dialogs d ON m.dialog_id = d.id "
                    "WHERE d.user_id = :uid "
                    "ORDER BY m.created_at DESC"
                ),
                {'uid': user_id}
            )
            messages = result.fetchall()
            if not messages:
                await message.answer("–£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç.")
                return
            for text_msg, created in messages:
                dt_str = created.strftime("%d.%m.%Y %H:%M")
                await message.answer(f"üïí {dt_str}\nüìù {text_msg}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {str(e)}")


@router.message()
async def unknown_command(message: types.Message):
    if message.text and message.text.startswith('/'):
        await message.reply("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.")
